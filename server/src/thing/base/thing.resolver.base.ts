/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateThingArgs } from "./CreateThingArgs";
import { UpdateThingArgs } from "./UpdateThingArgs";
import { DeleteThingArgs } from "./DeleteThingArgs";
import { ThingFindManyArgs } from "./ThingFindManyArgs";
import { ThingFindUniqueArgs } from "./ThingFindUniqueArgs";
import { Thing } from "./Thing";
import { ThingService } from "../thing.service";

@graphql.Resolver(() => Thing)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class ThingResolverBase {
  constructor(
    protected readonly service: ThingService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Thing",
    action: "read",
    possession: "any",
  })
  async _thingsMeta(
    @graphql.Args() args: ThingFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Thing])
  @nestAccessControl.UseRoles({
    resource: "Thing",
    action: "read",
    possession: "any",
  })
  async things(@graphql.Args() args: ThingFindManyArgs): Promise<Thing[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Thing, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Thing",
    action: "read",
    possession: "own",
  })
  async thing(
    @graphql.Args() args: ThingFindUniqueArgs
  ): Promise<Thing | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Thing)
  @nestAccessControl.UseRoles({
    resource: "Thing",
    action: "create",
    possession: "any",
  })
  async createThing(@graphql.Args() args: CreateThingArgs): Promise<Thing> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Thing)
  @nestAccessControl.UseRoles({
    resource: "Thing",
    action: "update",
    possession: "any",
  })
  async updateThing(
    @graphql.Args() args: UpdateThingArgs
  ): Promise<Thing | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Thing)
  @nestAccessControl.UseRoles({
    resource: "Thing",
    action: "delete",
    possession: "any",
  })
  async deleteThing(
    @graphql.Args() args: DeleteThingArgs
  ): Promise<Thing | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
